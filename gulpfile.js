'use strict';

var gulp = require('gulp');
var browserSync = require('browser-sync'),
    reload = browserSync.reload;
var del = require('del');
var plumber = require('gulp-plumber'),
    ejs = require('gulp-ejs');
var autoprefixer = require('gulp-autoprefixer'),
    stylus = require('gulp-stylus'),
    swiss = require('kouto-swiss');
var concat = require('gulp-concat');
var babel = require('gulp-babel');
var browserify = require('browserify'),
    babelify = require('babelify'),
    buffer = require('vinyl-buffer'),
    source = require('vinyl-source-stream'),
    sourcemaps = require('gulp-sourcemaps'),
    uglify = require('gulp-uglify'),
    minimist = require('minimist'),
    licensify = require('licensify');
var imagemin = require('gulp-imagemin');
var fs = require('fs');

var options = minimist(process.argv.slice(2), {
    string: 'env',
    env: process.env.NODE_ENV || 'development'
});
var isProduction = (options.env === 'production');

var siteSettings = JSON.parse(fs.readFileSync('src/site.json'));

gulp.task('clean', function() {
    del(['dist']);
});

gulp.task('html', function() {
    return gulp.src('src/**/*.html')
        .pipe(gulp.dest('dist'))
        .pipe(reload({stream: true}));
});

gulp.task('ejs', function() {
    gulp.src(['src/templates/*.ejs', '!src/templates/_*.ejs'])
        .pipe(plumber())
        .pipe(ejs({
            siteSettings: siteSettings
        },{
            ext: ".html"
        }
        ))
        .pipe(gulp.dest('dist/'));
});

gulp.task('stylus', function () {
    gulp.src('src/stylus/*.styl')
        .pipe(sourcemaps.init())
        .pipe(stylus({
            compress: true,
            use: [swiss()]
        }))
        .pipe(autoprefixer({
            browsers: ['last 2 versions'],
            cascade: false
        }))
        .pipe(sourcemaps.write('./'))
        .pipe(gulp.dest('dist/css'))
        .pipe(reload({stream: true}));
});

gulp.task('js', function() {
    gulp.src(['src/js/*.js'])
        .pipe(concat('app.js'))
        .pipe(sourcemaps.init({loadMaps: true}))
        .pipe(babel({
            presets: ['es2015']
        }))
        .pipe(uglify({
            mangle: isProduction,
            compress: isProduction,
            preserveComments: 'same'
        }))
        .pipe(sourcemaps.write('./'))
        .pipe(gulp.dest('dist/js'));
});

gulp.task('js-bundle', function () {
    browserify({
        entries: ['src/js/app.js'],
        debug: isProduction
    })
        .transform(babelify)
        .plugin(licensify)
        .bundle()
        .pipe(source('app.js'))
        .pipe(buffer())
        .pipe(uglify({
            output: {comments: /generated by licensify/}
        }))
        .pipe(gulp.dest('dist/js'))
        .pipe(browserSync.reload({stream: true}));
});

gulp.task('image', function() {
    gulp.src('src/images/*.{gif,jpg,jpeg,png,svg}')
            .pipe(imagemin({
                optimizationLevel: 7
            }))
            .pipe(gulp.dest('dist/img'));
});

gulp.task('build', ['html', 'stylus', 'ejs', 'js-bundle', 'image']);

gulp.task('serve', function() {
    browserSync({
        notify: false,
        server: {
            baseDir: "./dist/",
            index: "index.html"
        }
    });
});

gulp.task('watch', function() {
    gulp.watch('src/**/*.html', ["html", reload]);
    gulp.watch('src/stylus/**/*.styl', ["stylus", reload]);
    gulp.watch(['src/templates/*.ejs', 'site.json'], ["ejs", reload]);
    gulp.watch('src/js/**/*.js', ["js-bundle", reload]);
    gulp.watch('src/images/*.{gif,jpg,jpeg,png,svg}', ["image"]);
})

gulp.task('default', ['build', 'serve', 'watch']);